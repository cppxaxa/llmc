{"article":"Write me a bubble sort program. Here it goes: def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Example usage\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me an insertion sort program. Here it goes: def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n\n# Example usage\narr = [12, 11, 13, 5, 6]\ninsertion_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a selection sort program. Here it goes: def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n# Example usage\narr = [64, 25, 12, 22, 11]\nselection_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a heap sort program. Here it goes: def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n# Example usage\narr = [12, 11, 13, 5, 6, 7]\nheap_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a quick sort program. Here it goes: def partition(arr, low, high):\n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1)\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi-1)\n        quick_sort(arr, pi+1, high)\n\n# Example usage\narr = [10, 7, 8, 9, 1, 5]\nn = len(arr)\nquick_sort(arr, 0, n-1)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a merge sort program. Here it goes: def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n# Example usage\narr = [12, 11, 13, 5, 6, 7]\nmerge_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a shell sort program. Here it goes: def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= 1\n            arr[j] = temp\n        gap //= 2\n\n# Example usage\narr = [12, 34, 54, 2, 3]\nshell_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a counting sort program. Here it goes: def counting_sort(arr):\n    max_val = max(arr)\n    m = max_val + 1\n    count = [0] * m\n    for a in arr:\n        count[a] += 1\n    i = 0\n    for a in range(m):\n        for c in range(count[a]):\n            arr[i] = a\n            i += 1\n\n# Example usage\narr = [4, 2, 2, 8, 3, 3, 1]\ncounting_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a radix sort program. Here it goes: def counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(n):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max_val = max(arr)\n    exp = 1\n    while max_val // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n\n# Example usage\narr = [170, 45, 75, 90, 802, 24, 2, 66]\nradix_sort(arr)\nprint(\"Sorted array is:\", arr)"}
{"article":"Write me a bucket sort program. Here it goes: def bucket_sort(arr):\n    bucket = [[] for _ in range(len(arr))]\n    for num in arr:\n        index = int(num * len(arr))\n        bucket[index].append(num)\n    for i in range(len(arr)):\n        bucket[i] = sorted(bucket[i])\n    k = 0\n    for i in range(len(arr)):\n        for j in range(len(bucket[i])):\n            arr[k] = bucket[i][j]\n            k += 1\n\n# Example usage\narr = [0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434]\nbucket_sort(arr)\nprint(\"Sorted array is:\", arr)"}
